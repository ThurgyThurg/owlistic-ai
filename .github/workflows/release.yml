name: artifacts-release

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  server-binary:
    name: Server binary Package and Archive
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      # Build Golang binary
      - name: Build Golang Binary
        run: |
          cd src/backend
          go build -o owlistic ./cmd/main.go
          
      # Archive Go binary as artifact
      - name: Archive Go Binary
        uses: actions/upload-artifact@v4
        with:
          name: Server Binary
          path: src/backend/owlistic
          retention-days: 7
          if-no-files-found: error

  server-docker-arm64:
    name: Server Docker Build and Push (ARM64)
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      # Set up QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag,enable=true,prefix=,suffix=
            type=raw,value=latest,enabled=true

      # Build Docker Image for arm64
      - name: Build Backend Docker Image (ARM64)
        uses: docker/build-push-action@v5
        with:
          push: false
          context: src/backend
          platforms: linux/arm64
          file: src/backend/Dockerfile
          build-args: |
            TARGETARCH=arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  server-docker-amd64:
    name: Server Docker Build and Push (AMD64)
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      # Set up QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag,enable=true,prefix=,suffix=
            type=raw,value=latest,enabled=true

      # Build Docker Image for amd64
      - name: Build Backend Docker Image (AMD64)
        uses: docker/build-push-action@v5
        with:
          push: false
          context: src/backend
          platforms: linux/amd64
          file: src/backend/Dockerfile
          build-args: |
            TARGETARCH=amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  frontend-package:
    name: Frontend Package and Archive
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Setup Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      # Install Dependencies
      - name: Install Flutter Dependencies
        run: |
          cd src/frontend
          flutter pub get

      # Build Flutter Apps for Multiple Platforms
      - name: Build Client Apps
        run: |
          cd src/frontend

          # Configure Flutter for web
          flutter config --enable-web
          # --enable-android --enable-ios --enable-macos-desktop  --enable-linux-desktop --enable-linux-desktop

          # Get Flutter packages
          flutter pub get

          # Initialize web project (creates index.html if missing)
          flutter create --platforms=web . #,android,ios,macos,linux
          
          # Build web app
          flutter build web --release

          # Build Android app
          # flutter build apk --release

          # Build iOS app
          # flutter build ios --release

          # Build macOS app
          # flutter build macos --release

          # Build macOS app
          # flutter build linux --release
          
      # Archive Flutter web build as artifact
      - name: Archive Web App
        uses: actions/upload-artifact@v4
        with:
          name: Web App
          path: src/frontend/web
          retention-days: 7
          if-no-files-found: error

  frontend-docker-arm64:
    name: Frontend Docker Build and Push (ARM64)
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      # Set up QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag,enable=true,priority=600,prefix=,suffix=
            type=raw,value=latest,enabled=true

      # Build Docker Image for arm64
      - name: Build Frontend Docker Image (ARM64)
        uses: docker/build-push-action@v5
        with:
          push: false
          context: src/frontend
          platforms: linux/arm64
          file: src/frontend/Dockerfile
          build-args: |
            TARGETARCH=arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  frontend-docker-amd64:
    name: Frontend Docker Build and Push (AMD64)
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      # Set up QEMU for cross-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag,enable=true,prefix=,suffix=
            type=raw,value=latest,enabled=true

      # Build Docker Image for amd64
      - name: Build Frontend Docker Image (AMD64)
        uses: docker/build-push-action@v5
        with:
          push: false
          context: src/frontend
          platforms: linux/amd64
          file: src/frontend/Dockerfile
          build-args: |
            TARGETARCH=amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
